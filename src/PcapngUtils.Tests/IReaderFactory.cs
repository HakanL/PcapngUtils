using Haukcode.PcapngUtils.Pcap;
using Haukcode.PcapngUtils.PcapNG;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Haukcode.PcapngUtils.Tests
{
    [TestFixture]
    public static class IReaderFactory_Test
    {
        [TestCase]
        public static void IReader_PCAP_Stream_Test()
        {
            byte[] data = {
                0xD4, 0xC3, 0xB2, 0xA1, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00,
                0x35, 0x00, 0x00, 0x00, 0xAB, 0xCD, 0xEF, 0x12, 0x78, 0x90, 0xAB, 0xCD,
                0xEF, 0x12, 0x34, 0x56, 0x08, 0x00, 0x45, 0x00, 0x00, 0x27, 0x00, 0x00,
                0x00, 0x00, 0x40, 0x11, 0x00, 0x00, 0xC0, 0xA8, 0x01, 0x01, 0xC0, 0xA8,
                0x01, 0x02, 0x00, 0x7B, 0x01, 0x41, 0x00, 0x13, 0x00, 0x00, 0x54, 0x65,
                0x73, 0x74, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x65, 0x74
            };

            using (var stream = new MemoryStream(data))
            {
                var reader = IReaderFactory.GetReader(stream);

                Assert.That(reader, Is.Not.Null);
                Assert.IsInstanceOf<PcapReader>(reader);

                Assert.IsNotNull(reader.ReadNextPacket());
                Assert.IsNull(reader.ReadNextPacket());
            }
        }

        [TestCase]
        public static void IReader_PCAPNG_Stream_Test()
        {
            byte[] data = {
                0x0A, 0x0D, 0x0D, 0x0A, 0x1C, 0x00, 0x00, 0x00, 0x4D, 0x3C, 0x2B, 0x1A,
                0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0x1C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x14, 0x00, 0x00, 0x00,
                0x06, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00,
                0x35, 0x00, 0x00, 0x00, 0xAB, 0xCD, 0xEF, 0x12, 0x78, 0x90, 0xAB, 0xCD,
                0xEF, 0x12, 0x34, 0x56, 0x08, 0x00, 0x45, 0x00, 0x00, 0x27, 0x00, 0x00,
                0x00, 0x00, 0x40, 0x11, 0x00, 0x00, 0xC0, 0xA8, 0x01, 0x01, 0xC0, 0xA8,
                0x01, 0x02, 0x00, 0x7B, 0x01, 0x41, 0x00, 0x13, 0x00, 0x00, 0x54, 0x65,
                0x73, 0x74, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x65, 0x74, 0x00, 0x00, 0x00,
                0x58, 0x00, 0x00, 0x00
            };

            using (var stream = new MemoryStream(data))
            {
                var reader = IReaderFactory.GetReader(stream);

                Assert.That(reader, Is.Not.Null);
                Assert.IsInstanceOf<PcapNGReader>(reader);

                Assert.IsNotNull(reader.ReadNextPacket());
                Assert.IsNull(reader.ReadNextPacket());
            }
        }

        [TestCase]
        public static void IReader_PCAP_File_Test()
        {
            using var reader = IReaderFactory.GetReader(Path.Join(TestContext.CurrentContext.TestDirectory, "TestFiles", "single_packet.pcap"));

            Assert.That(reader, Is.Not.Null);
            Assert.IsInstanceOf<PcapReader>(reader);

            Assert.IsNotNull(reader.ReadNextPacket());
            Assert.IsNull(reader.ReadNextPacket());
        }

        [TestCase]
        public static void IReader_PCAPNG_File_Test()
        {
            using var reader = IReaderFactory.GetReader(Path.Join(TestContext.CurrentContext.TestDirectory, "TestFiles", "single_packet.pcapng"));

            Assert.That(reader, Is.Not.Null);
            Assert.IsInstanceOf<PcapNGReader>(reader);

            Assert.IsNotNull(reader.ReadNextPacket());
            Assert.IsNull(reader.ReadNextPacket());
        }

        [TestCase]
        public static void IReader_HeaderTooSmall_Test()
        {
            byte[] data = {
                0xD4, 0xC3, 0xB2, 0xA1, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00
            };

            using (var stream = new MemoryStream(data))
            {
                Assert.That(() =>
                {
                    var reader = IReaderFactory.GetReader(stream);
                },
                Throws.InstanceOf<ArgumentException>());
            }
        }

        [TestCase]
        public static void IReader_PCAP_InvalidHeader_Test()
        {
            byte[] data = {
                0xD4, 0xC3, 0xB2, 0xA2, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00,
                0x35, 0x00, 0x00, 0x00, 0xAB, 0xCD, 0xEF, 0x12, 0x78, 0x90, 0xAB, 0xCD,
                0xEF, 0x12, 0x34, 0x56, 0x08, 0x00, 0x45, 0x00, 0x00, 0x27, 0x00, 0x00,
                0x00, 0x00, 0x40, 0x11, 0x00, 0x00, 0xC0, 0xA8, 0x01, 0x01, 0xC0, 0xA8,
                0x01, 0x02, 0x00, 0x7B, 0x01, 0x41, 0x00, 0x13, 0x00, 0x00, 0x54, 0x65,
                0x73, 0x74, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x65, 0x74
            };

            using (var stream = new MemoryStream(data))
            {
                Assert.That(() =>
                {
                    var reader = IReaderFactory.GetReader(stream);
                },
                Throws.InstanceOf<ArgumentException>());
            }
        }
    }
}
